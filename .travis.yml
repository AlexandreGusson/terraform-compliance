language: python
python:
  - '2.7'
jobs:
  include:
    - stage: Test
      provider: script
      script:
          - echo "export RELEASE_VERSION=$(cat terraform_compliance/main.py | grep "__version__ = \".*\"" | grep -o "\d*\.\d*\.\d*")" > reqs.sh
          - source reqs.sh
          - echo "Testing version $RELEASE_VERSION"
          - if [ "$RELEASE_VERSION" != "$TRAVIS_TAG" ]; then echo "Release version ($RELEASE_VERSION) does not match with git tag ($TRAVIS_TAG)"; exit 1; fi
          - py.test -v


    - stage: Build & Deploy (PYPI)
      script: "echo 'PYPI Build & Deploy'"
      deploy:
          skip_cleanup: true
          provider: pypi
          user: env(PYPI_USER)
          pass: env(PYPI_PASS)
          distributions: "sdist bdist_wheel"
          on:
            tags: true
            branch: travis_test
            type: pull_request
            fork: false

    - stage: Build & Deploy (Docker)
      script: "echo 'Docker Build & Deploy'"
      deploy:
          skip_cleanup: true
          services: docker
          env:
            - IMAGE_NAME = "eerkunt/terraform-compliance"
          on:
            tags: true
            branch: travis_test
            type: pull_request
            fork: false

          script:
            - docker build -t "$IMAGE_NAME" .
            - echo "export RELEASE_VERSION=$(docker run --rm "$IMAGE_NAME" -v)" > reqs.sh
            - source reqs.sh
            - sed s/__VERSION__/"$TRAVIS_TAG"/ Dockerfile.template > Dockerfile
            - if [ "$RELEASE_VERSION" != "$TRAVIS_TAG" ]; then echo "Release version ($RELEASE_VERSION) does not match with git tag ($TRAVIS_TAG)"; exit 1; fi
            - docker images
            - docker login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASS"
            - docker tag "$IMAGE_NAME" eerkunt/terraform-compliance:travis
            - docker tag "$IMAGE_NAME" "$IMAGE_NAME":"$RELEASE_VERSION"
            - docker push "$IMAGE_NAME":travis
            - docker push "$IMAGE_NAME":"$RELEASE_VERSION"

    - stage: Release (GitHub)
      script: "echo 'Releasing to GitHub'"
      deploy:
          skip_cleanup: true
          provider: releases
          api_key: $GITHUB_OAUTH_TOKEN
          skip_cleanup: true
          on:
            tags: true
            branch: travis_test
            type: pull_request
            fork: false